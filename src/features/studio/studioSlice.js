import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchConfig } from "./studioAPI";
// ,'editor', 'email'
export const ScreenNames = [
  "welcome",
  "layouts",
  "experience",
  "frames",
  "capture",
  "decision",
  "upload",
];
// export type Layout = 'feed'|'stori'|'laptop';
// export type Experiences = 'photo'|'boomerang'|'GIF'|'video';
// export type Status = 'idle'|'counter'|'loading'|'gifCapturing'|'videoCapturing';
// export type Screen = 'welcome'|'layout'|'experience'|'frame'|'capture'|'sticker'|'decision'|'legal'|'download';

const initialState = {
  screen: "welcome",
  layout: "feed",
  experience: "photo",
  frame: "./images/frame_1.png",
  status: "idle",
  image: null,
  video: null,
  videoCapture: false,
  videoConstraints: {
    width: 400,
    height: 400,
    facingMode: "user",
  },
  hubConfig: null,
  counter: 3,
  gif: {
    interval: 3,
    numFrames: 4,
  },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(getHubConfig(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getHubConfig = createAsyncThunk(
  "studio/fetchConfig",
  async (amount) => {
    const response = await fetchConfig(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const studioSlice = createSlice({
  name: "studio",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    changeScreen: (state, action) => {
      state.screen = action.payload;
    },
    setLayout: (state, action) => {
      state.layout = action.payload;
      if (action.payload === "feed") {
        state.videoConstraints.width = 400;
        state.videoConstraints.height = 400;
      }
      if (action.payload === "stori") {
        state.videoConstraints.width = 400;
        state.videoConstraints.height = 500;
      }
      if (action.payload === "laptop") {
        state.videoConstraints.width = 600;
        state.videoConstraints.height = 400;
        // state.videoConstraints.width = 1280;
        // state.videoConstraints.height = 628;
      }
      state.screen = "experience";
    },
    setExperience: (state, action) => {
      state.experience = action.payload;
      // state.screen = 'frame';
    },
    setFrame: (state, action) => {
      state.frame = action.payload;
    },
    setImage: (state, action) => {
      state.image = action.payload;
      // state.screen = 'decision';
    },
    setDecision: (state, action) => {
      if (action.payload === "approve") {
        // state.screen = 'editor';
        state.screen = "download";
      }

      if (action.payload === "retake") {
        state.image = null;
        state.video = null;
        state.status = "loading";
        state.screen = "capture";
      }

      if (action.payload === "reset") {
        state.status = "loading";
        state.image = null;
        state.video = null;
      }
    },
    setStatus: (state, action) => {
      state.status = action.payload;
    },
    setVideoCaptureStatus: (state, action) => {
      state.videoCapture = action.payload;
    },
    setVideoData: (state, action) => {
      state.video = action.payload;
    },
    changeCameraFace: (state, action) => {
      state.videoConstraints.facingMode =
        state.videoConstraints.facingMode === "user"
          ? { exact: "environment" }
          : "user";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getHubConfig.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getHubConfig.fulfilled, (state, action) => {
        state.status = "idle";
        state.hubConfig = action.payload;
      });
  },
});

export const {
  changeScreen,
  setLayout,
  setExperience,
  setFrame,
  setImage,
  setDecision,
  setStatus,
  setVideoCaptureStatus,
  setVideoData,
  changeCameraFace,
} = studioSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getStatus = (state) => state.studio.status;
export const selectScreen = (state) => state.studio.screen;
export const selectLayout = (state) => state.studio.layout;
export const selectExperience = (state) => state.studio.experience;
export const selectFrame = (state) => state.studio.frame;
export const selectImage = (state) => state.studio.image;
export const selectVideoConstraints = (state) => state.studio.videoConstraints;
export const selectVideoCaptureStatus = (state) => state.studio.videoCapture;
export const selectCapturedVideo = (state) => state.studio.video;
export const selectCounter = (state) => state.studio.counter;
export const selectGifSetting = (state) => state.studio.gif;

export default studioSlice.reducer;
